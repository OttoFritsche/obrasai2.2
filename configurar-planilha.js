/**
 * üìä Configurador de Planilha ObrasAI - Leads
 * 
 * Cole este c√≥digo no Google Apps Script para configurar 
 * automaticamente os cabe√ßalhos da planilha.
 * 
 * Como usar:
 * 1. Abra a planilha Google Sheets
 * 2. V√° em Extens√µes > Apps Script
 * 3. Cole este c√≥digo
 * 4. Execute a fun√ß√£o configurarPlanilhaLeads()
 */

function configurarPlanilhaLeads() {
  // ID da sua planilha (j√° extra√≠do da URL)
  const SHEET_ID = '1r8x182-OCOCVRdC5X6ugche6Ju18KWULMHU7FXpCLLE';
  
  try {
    // Abrir a planilha
    const sheet = SpreadsheetApp.openById(SHEET_ID);
    const worksheet = sheet.getSheetByName('leads') || sheet.getActiveSheet();
    
    // Limpar primeira linha
    worksheet.getRange(1, 1, 1, 20).clearContent();
    
    // Configurar cabe√ßalhos
    const headers = [
      'Email',
      'Nome', 
      'Telefone',
      'Empresa',
      'Cargo',
      'N√≠vel Interesse',
      'Origem',
      'Score Qualifica√ß√£o',
      'Prioridade',
      'Lead ID',
      'Data/Hora',
      'Principal Desafio',
      'Observa√ß√µes/Conversa'
    ];
    
    // Inserir cabe√ßalhos
    worksheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // Formata√ß√£o dos cabe√ßalhos
    const headerRange = worksheet.getRange(1, 1, 1, headers.length);
    headerRange.setBackground('#4285f4');
    headerRange.setFontColor('#ffffff');
    headerRange.setFontWeight('bold');
    headerRange.setHorizontalAlignment('center');
    
    // Ajustar largura das colunas
    worksheet.setColumnWidth(1, 200); // Email
    worksheet.setColumnWidth(2, 150); // Nome
    worksheet.setColumnWidth(3, 120); // Telefone
    worksheet.setColumnWidth(4, 180); // Empresa
    worksheet.setColumnWidth(5, 120); // Cargo
    worksheet.setColumnWidth(6, 120); // N√≠vel Interesse
    worksheet.setColumnWidth(7, 100); // Origem
    worksheet.setColumnWidth(8, 120); // Score
    worksheet.setColumnWidth(9, 100); // Prioridade
    worksheet.setColumnWidth(10, 280); // Lead ID
    worksheet.setColumnWidth(11, 140); // Data/Hora
    worksheet.setColumnWidth(12, 200); // Principal Desafio
    worksheet.setColumnWidth(13, 300); // Observa√ß√µes
    
    // Congelar primeira linha
    worksheet.setFrozenRows(1);
    
    // Adicionar formata√ß√£o alternada
    const dataRange = worksheet.getRange(2, 1, 1000, headers.length);
    dataRange.applyRowBanding();
    
    // Mensagem de sucesso
    console.log('‚úÖ Planilha configurada com sucesso!');
    console.log('üìä Cabe√ßalhos inseridos: ' + headers.length);
    console.log('üé® Formata√ß√£o aplicada');
    
    // Mostrar notifica√ß√£o na planilha
    SpreadsheetApp.getUi().alert(
      'ObrasAI - Configura√ß√£o Completa!',
      '‚úÖ Planilha configurada com sucesso!\n\n' +
      'üìä ' + headers.length + ' cabe√ßalhos inseridos\n' +
      'üé® Formata√ß√£o aplicada\n' +
      'üîí Primeira linha congelada\n\n' +
      'Agora voc√™ pode importar o fluxo N8N!',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar planilha:', error);
    SpreadsheetApp.getUi().alert(
      'Erro na Configura√ß√£o',
      '‚ùå Erro: ' + error.toString(),
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

/**
 * üß™ Fun√ß√£o de teste para verificar se tudo est√° funcionando
 */
function testarConfiguracao() {
  const SHEET_ID = '1r8x182-OCOCVRdC5X6ugche6Ju18KWULMHU7FXpCLLE';
  
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID);
    const worksheet = sheet.getSheetByName('leads') || sheet.getActiveSheet();
    
    // Verificar se cabe√ßalhos existem
    const headers = worksheet.getRange(1, 1, 1, 13).getValues()[0];
    
    console.log('üìã Cabe√ßalhos encontrados:', headers);
    
    if (headers[0] === 'Email' && headers.length >= 13) {
      console.log('‚úÖ Planilha configurada corretamente!');
      return true;
    } else {
      console.log('‚ùå Planilha n√£o est√° configurada');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar:', error);
    return false;
  }
}

/**
 * üìù Fun√ß√£o para adicionar um lead de exemplo
 */
function adicionarLeadExemplo() {
  const SHEET_ID = '1r8x182-OCOCVRdC5X6ugche6Ju18KWULMHU7FXpCLLE';
  
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID);
    const worksheet = sheet.getSheetByName('leads') || sheet.getActiveSheet();
    
    // Dados de exemplo
    const leadExemplo = [
      'teste@obrasai.com',
      'Jo√£o Silva',
      '(11) 99999-9999',
      'Construtora ABC',
      'Engenheiro Civil',
      'alto',
      'chat_ia',
      85,
      'alta',
      'lead-exemplo-123',
      new Date().toLocaleString('pt-BR'),
      'Controle de custos',
      'Lead de exemplo inserido via script'
    ];
    
    // Encontrar pr√≥xima linha vazia
    const lastRow = worksheet.getLastRow();
    const nextRow = lastRow + 1;
    
    // Inserir dados
    worksheet.getRange(nextRow, 1, 1, leadExemplo.length).setValues([leadExemplo]);
    
    console.log('‚úÖ Lead de exemplo adicionado na linha ' + nextRow);
    
    SpreadsheetApp.getUi().alert(
      'Lead de Exemplo Adicionado!',
      '‚úÖ Lead de teste inserido na linha ' + nextRow + '\n\n' +
      'Agora voc√™ pode testar o fluxo N8N!',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
  } catch (error) {
    console.error('‚ùå Erro ao adicionar lead exemplo:', error);
  }
} 