---
description:
globs:
alwaysApply: true
---

# üß† Regras Espec√≠ficas do Projeto ObrasAI (v2.0)

**Sempre fale em portugu√™s brasileiro.**

## üéØ Objetivo do Projeto

Desenvolver e manter o **ObrasAI** como uma plataforma completa de gest√£o de
obras com foco em **captura inteligente de leads**, automa√ß√£o de processos e
integra√ß√£o com sistemas externos. O sistema deve ser escal√°vel, modular e de
alta qualidade, priorizando a simplicidade e efici√™ncia.

## üö® Regra Cr√≠tica de Arquitetura

- **Limite de Tamanho de Arquivos:** Arquivos n√£o devem exceder **400-500 linhas
  de c√≥digo**. Arquivos maiores devem ser **obrigatoriamente refatorados** em
  m√≥dulos menores para facilitar manuten√ß√£o, legibilidade e evitar complexidade
  excessiva. Aplicar princ√≠pio da responsabilidade √∫nica.

---

## ‚úÖ Checklist de Boas Pr√°ticas de C√≥digo

1. **Evitar Duplica√ß√£o de C√≥digo (DRY):** Utilizar componentes, hooks e fun√ß√µes
   reutiliz√°veis para evitar a repeti√ß√£o de l√≥gica.
2. **Eliminar C√≥digo N√£o Utilizado (Dead Code):** Remover componentes, fun√ß√µes,
   imports e vari√°veis de estado que n√£o s√£o usados.
3. **Uso Consistente de TypeScript:** Proibir o uso de `any`, tipar todas as
   props e usar `interface` para objetos e `type` para uni√µes/aliases.
4. **Componentes Bem Estruturados:** Manter componentes pequenos e focados
   (m√°ximo de 250 linhas), seguindo o princ√≠pio da responsabilidade √∫nica.
5. **Gerenciamento de Estado Eficiente:** Usar `TanStack Query` para estado do
   servidor e `Context API` de forma modular para estado global. Evitar "prop
   drilling".
6. **Uso Correto de React Hooks:** Seguir as regras dos hooks, gerenciar
   depend√™ncias (`useEffect`, `useCallback`) e criar custom hooks para l√≥gicas
   complexas.
7. **Separa√ß√£o de L√≥gica e Apresenta√ß√£o:** Isolar a l√≥gica de neg√≥cio em hooks e
   servi√ßos, mantendo os componentes focados na UI.
8. **Tratamento de Erros Robusto:** Usar `try/catch` em chamadas de API,
   implementar `Error Boundaries` e fornecer feedback claro ao usu√°rio.
9. **Performance e Otimiza√ß√µes:** Utilizar `React.memo`, `useCallback`,
   `useMemo` quando necess√°rio, virtualizar listas longas e otimizar imagens.
10. **Estrutura e Organiza√ß√£o do Projeto:** Seguir a estrutura de arquivos e
    pastas definida, evitando depend√™ncias circulares e arquivos muito grandes.
11. **Acessibilidade (a11y):** Garantir que a aplica√ß√£o seja acess√≠vel, com
    labels, `alt` text para imagens, sem√¢ntica HTML correta e navega√ß√£o por
    teclado.
12. **Testes Adequados (ver se√ß√£o de testes).**

---

## üõ°Ô∏è Checklist de Seguran√ßa e Compliance (Cr√≠tico)

1. **Proteger Chaves e Dados Sens√≠veis:** **Nunca** fazer commit de segredos.
   Usar vari√°veis de ambiente (`.env`) e garantir que `.gitignore` as exclua.
2. **N√£o Expor APIs no Frontend:** Toda a l√≥gica sens√≠vel e chamadas de API com
   chaves devem ser feitas no backend (Edge Functions).
3. **Valida√ß√£o de Dados de Entrada:** Validar **TODOS** os inputs no frontend
   (Zod) e no backend para prevenir inje√ß√£o de dados maliciosos.
4. **Autentica√ß√£o e Autoriza√ß√£o (RLS):** **RLS √© obrigat√≥rio em todas as
   tabelas**. Verificar permiss√µes em todas as rotas e queries sens√≠veis.
5. **Prote√ß√£o Contra Ataques Comuns:** Usar ORM do Supabase para prevenir SQL
   Injection. Validar e sanitizar dados para prevenir XSS.
6. **Logging Adequado:** Manter logs de eventos cr√≠ticos (logins, erros), mas
   **NUNCA** registrar senhas, tokens ou dados pessoais nos logs.
7. **Pol√≠tica de Senhas Fortes:** Exigir senhas fortes via valida√ß√£o Zod e usar
   o hash seguro do Supabase Auth.
8. **Backup e Recupera√ß√£o de Dados:** Utilizar os backups autom√°ticos do
   Supabase e ter um plano de recupera√ß√£o.
9. **An√°lise de Depend√™ncias:** Manter as depend√™ncias atualizadas e
   periodicamente rodar `npm audit` para encontrar vulnerabilidades.
10. **Comunica√ß√£o Segura (HTTPS):** For√ßar HTTPS em toda a aplica√ß√£o.
11. **LGPD e Prote√ß√£o de Dados:** Garantir consentimento expl√≠cito, finalidade
    espec√≠fica e direito ao esquecimento para todos os dados de usu√°rios e
    leads.

---

## üß™ Estrat√©gia de Testes

- **Foco em Testes de Integra√ß√£o:** Priorizar testes que simulam o comportamento
  real do usu√°rio nos componentes React, utilizando a `React Testing Library`.
- **Mocking de API com MSW:** Padronizar o uso do **Mock Service Worker (MSW)**
  para interceptar chamadas de API (`fetch`), tornando os testes realistas e
  independentes do backend.
- **Testes Unit√°rios para L√≥gica Pura:** Cobrir com testes unit√°rios (Vitest)
  toda a l√≥gica de neg√≥cio isolada, especialmente validadores (Zod) e fun√ß√µes
  utilit√°rias (`/lib/utils`).
- **Verifica√ß√£o da UI:** Os testes de integra√ß√£o devem sempre verificar o
  resultado final na interface do usu√°rio (ex: um toast de sucesso aparece, uma
  navega√ß√£o ocorre), em vez de apenas verificar se uma fun√ß√£o mockada foi
  chamada.
- **Cobertura de Fluxos Cr√≠ticos:** Garantir testes de integra√ß√£o para os fluxos
  mais importantes: registro, login, cria√ß√£o de obras, lan√ßamento de despesas,
  etc.

---

## ü§ñ Diretrizes para IA Assistente

### **Ao Desenvolver**

1. **Sempre confirmar antes de deletar:** C√≥digo, arquivos ou configura√ß√µes.
2. **Explicar o "porqu√™":** N√£o apenas o "como", mas justificar as decis√µes
   alinhadas a estas regras.
3. **Foco na Simplicidade:** Priorizar a solu√ß√£o mais simples e direta que
   atenda aos requisitos.
4. **Aplicar Checklists:** Ser proativo na aplica√ß√£o de **TODOS** os pontos dos
   checklists de seguran√ßa e boas pr√°ticas.
5. **Testar o Fluxo Completo:** Para novas funcionalidades, sempre incluir um
   teste (unit√°rio ou de integra√ß√£o) seguindo a estrat√©gia definida.

---

_√öltima atualiza√ß√£o: 2025-01-01_ _Vers√£o: 2.0_
