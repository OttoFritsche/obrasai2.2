---
description: Regras e boas práticas de desenvolvimento para o projeto.
globs: 
alwaysApply: true
---
# Boas Práticas de Desenvolvimento

Este documento descreve as boas práticas e diretrizes para o desenvolvimento de software neste projeto. O objetivo é garantir consistência, qualidade e manutenibilidade do código.

## 1. Estrutura de Projeto
Mantenha a estrutura de pastas atual:
- `src/components/`: Componentes de UI organizados por funcionalidade ou propósito.
- `src/contexts/`: Provedores de contexto para gerenciamento de estado global.
- `src/hooks/`: Hooks React personalizados para lógica reutilizável.
- `src/integrations/`: Integrações com serviços de terceiros (ex: Supabase).
- `src/lib/`: Funções utilitárias, esquemas de validação, formatadores.
- `src/pages/`: Componentes de rota (páginas da aplicação).
- `src/services/`: Funções de serviço para chamadas de API.

## 2. Autenticação e Autorização
- Continue utilizando o padrão `AuthContext` para gerenciamento de autenticação.
- Mantenha as rotas protegidas envolvidas no componente `ProtectedRoute`.
- Mantenha o controle de acesso baseado em funções via `AdminRoute` quando aplicável.

## 3. Gerenciamento de Estado
- Utilize `React Context` para estado global (ex: autenticação, temas).
- Aproveite `useQuery` do `TanStack Query` para busca e cache de dados.
- Implemente estado de componente local com `useState` para estados específicos da UI.

## 4. Manipulação de Formulários
- Continue utilizando `react-hook-form` com `zod` para validação de formulários.
- Mantenha os esquemas de validação em arquivos dedicados sob `src/lib/validations/`.
- Mantenha tratamento de erros consistente e feedback claro para os usuários.

## 5. Integração de API
- Continue utilizando o padrão de serviço em `src/services/` para chamadas de API.
- Mantenha a integração com `Supabase` consistente com o padrão atual.
- Implemente tratamento adequado de erros e estados de carregamento.

## 6. Componentes de UI
- Utilize a biblioteca de componentes `Shadcn/UI` existente.
- Mantenha um estilo consistente com `Tailwind CSS`.
- Siga os padrões de composição de componentes estabelecidos.

## 7. Roteamento
- Continue utilizando `React Router` com a estrutura de layout atual.
- Mantenha convenções de nomenclatura de rotas consistentes.
- Mantenha o padrão de layout do dashboard para rotas protegidas.

## 8. Estilo de Código
- Siga as melhores práticas de `TypeScript` com tipagem adequada.
- Mantenha convenções de nomenclatura consistentes:
    - `PascalCase` para componentes e tipos.
    - `camelCase` para variáveis, funções e instâncias.
    - `snake_case` para campos de banco de dados (correspondendo ao Supabase).
- Utilize funções de seta para definições de componentes.

## 9. Tratamento de Erros
- Implemente limites de erro (`Error Boundaries`) consistentes.
- Utilize notificações `toast` para feedback ao usuário.
- Registre erros apropriadamente para depuração.

## 10. Otimização de Performance
- Utilize `React.memo` para componentes caros.
- Implemente arrays de dependência adequados em `useEffect` e `useCallback`.
- Aproveite o cache de consultas do `TanStack Query`.

## 11. Padrões de Banco de Dados (Supabase)
- Sempre use o MCP do `Supabase` para interação com o bando de dados
- Mantenha os padrões de nomenclatura de tabelas (`snake_case`).
- Implemente Políticas de Segurança de Linha (`RLS`) para todas as tabelas.
- Relacione corretamente as tabelas utilizando chaves estrangeiras.

## 12. Componentes de Interface
- Mantenha a estrutura `DashboardLayout` para páginas protegidas.
- Utilize os componentes de UI reutilizáveis da biblioteca `shadcn/ui`.
- Mantenha a responsividade nas interfaces.
