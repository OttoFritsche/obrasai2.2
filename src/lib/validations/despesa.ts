import { z } from "zod";

import { Constants } from "@/integrations/supabase/types";
import { t } from "@/lib/i18n";

// Define as op√ß√µes v√°lidas para forma de pagamento
export const formasPagamento = [
  "PIX",
  "Cart√£o de Cr√©dito",
  "Cart√£o de D√©bito",
  "Boleto Banc√°rio",
  "Transfer√™ncia Banc√°ria",
  "Dinheiro",
] as const; // Usa 'as const' para criar um tipo literal readonly

// ‚úÖ Define os enum types baseados no schema do banco de dados
// ‚ö†Ô∏è  IMPORTANTE: Usando apenas valores b√°sicos testados para evitar erros de enum
// üîß TODO: Sincronizar completamente com o banco ap√≥s verificar enums PostgreSQL
// üìç Refer√™ncia: src/integrations/supabase/types.ts - Database.public.Enums
const CategoriaEnum = z.enum([...Constants.public.Enums.categoria_enum] as [
  ...typeof Constants.public.Enums.categoria_enum,
]);

const EtapaEnum = z.enum([...Constants.public.Enums.etapa_enum] as [
  ...typeof Constants.public.Enums.etapa_enum,
]);

const InsumoEnum = z.enum([...Constants.public.Enums.insumo_enum] as [
  ...typeof Constants.public.Enums.insumo_enum,
]);

// Define o schema Zod para o formul√°rio de despesa
export const despesaSchema = z.object({
  // ID da obra (obrigat√≥rio, UUID)
  obra_id: z.string().uuid({ message: t("messages.requiredField") }),
  // ID do fornecedor PJ (opcional, UUID)
  fornecedor_pj_id: z.string().uuid().nullable().optional(),
  // ID do fornecedor PF (opcional, UUID)
  fornecedor_pf_id: z.string().uuid().nullable().optional(),
  // Descri√ß√£o da despesa (obrigat√≥rio, m√≠nimo 3 caracteres)
  descricao: z.string().min(3, { message: t("messages.atLeast3Chars") }),
  // Data da despesa (obrigat√≥rio)
  data_despesa: z.date({ required_error: t("messages.requiredField") }),
  // Insumo (opcional, baseado no enum)
  insumo: InsumoEnum.nullable().optional(),
  // Insumo customizado (opcional, para insumos n√£o-SINAPI)
  insumo_customizado: z.string().nullable().optional(),
  // C√≥digo SINAPI de refer√™ncia (opcional, para compara√ß√£o)
  sinapi_codigo: z.string().nullable().optional(),
  // ID de refer√™ncia SINAPI (opcional, para vincula√ß√£o)
  sinapi_referencia_id: z.string().nullable().optional(),
  // Etapa (opcional, baseado no enum)
  etapa: EtapaEnum.nullable().optional(),
  // Categoria (opcional, baseado no enum)
  categoria: CategoriaEnum.nullable().optional(),
  // Unidade de medida (opcional)
  unidade: z.string().nullable().optional(),
  // Quantidade (obrigat√≥rio, n√∫mero positivo)
  quantidade: z.coerce.number().positive({
    message: t("messages.positiveNumber"),
  })
    .min(0.01, { message: t("messages.positiveNumber") }),
  // Valor unit√°rio (obrigat√≥rio, n√∫mero positivo)
  valor_unitario: z.coerce.number().positive({
    message: t("messages.positiveNumber"),
  })
    .min(0.01, { message: t("messages.positiveNumber") }),
  // N√∫mero da nota fiscal (opcional)
  numero_nf: z.string().nullable().optional(),
  // Observa√ß√µes (opcional)
  observacoes: z.string().nullable().optional(),
  // Indica se a despesa foi paga (obrigat√≥rio, padr√£o false)
  pago: z.boolean().default(false),
  // Data do pagamento (opcional, mas obrigat√≥rio se 'pago' for true)
  data_pagamento: z.date().nullable().optional(),
  // Forma de pagamento (opcional, mas obrigat√≥rio se 'pago' for true)
  forma_pagamento: z.enum(formasPagamento).nullable().optional(),
})
  // Aplica valida√ß√£o refinada para campos condicionais de pagamento
  .superRefine((data, ctx) => {
    console.log('üîç Valida√ß√£o superRefine - dados:', { 
      pago: data.pago, 
      data_pagamento: data.data_pagamento,
      forma_pagamento: data.forma_pagamento 
    });
    
    // Se a despesa est√° marcada como paga
    if (data.pago) {
      console.log('‚úÖ Despesa marcada como paga, validando campos obrigat√≥rios...');
      
      // Verifica se a data de pagamento foi fornecida
      if (!data.data_pagamento) {
        console.log('‚ùå Data de pagamento ausente');
        // Adiciona um erro ao campo data_pagamento
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: t("messages.requiredField"),
          path: ["data_pagamento"], // Campo que gerou o erro
        });
      } else {
        console.log('‚úÖ Data de pagamento presente:', data.data_pagamento);
      }
      
      // Verifica se a forma de pagamento foi fornecida
      if (!data.forma_pagamento) {
        console.log('‚ùå Forma de pagamento ausente');
        // Adiciona um erro ao campo forma_pagamento
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: t("messages.requiredField"),
          path: ["forma_pagamento"], // Campo que gerou o erro
        });
      } else {
        console.log('‚úÖ Forma de pagamento presente:', data.forma_pagamento);
      }
    } else {
      console.log('‚ÑπÔ∏è Despesa n√£o marcada como paga, campos de pagamento opcionais');
    }
  });

// Exporta o tipo inferido do schema para uso no formul√°rio
export type DespesaFormValues = z.infer<typeof despesaSchema>;
