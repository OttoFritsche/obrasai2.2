/**
 * üéØ Schemas de valida√ß√£o para Or√ßamento Param√©trico
 * 
 * Este arquivo cont√©m todos os schemas Zod para valida√ß√£o de dados
 * do m√≥dulo de or√ßamento param√©trico com IA.
 * 
 * @author ObrasAI Team
 * @version 1.0.0
 */

import { z } from "zod";

// ====================================
// üìã ENUMs - Tipos de Dados Estruturados
// ====================================

/**
 * Tipos de obra suportados pelo sistema de or√ßamento
 */
export const TipoObraEnum = z.enum([
  "R1_UNIFAMILIAR",        // Resid√™ncia Unifamiliar  
  "R4_MULTIFAMILIAR",      // Resid√™ncia Multifamiliar
  "COMERCIAL_LOJA",        // Com√©rcio - Loja
  "COMERCIAL_ESCRITORIO",  // Com√©rcio - Escrit√≥rio
  "COMERCIAL_GALPAO",      // Com√©rcio - Galp√£o
  "INDUSTRIAL_LEVE",       // Industrial Leve
  "INDUSTRIAL_PESADA",     // Industrial Pesada
  "INSTITUCIONAL",         // Institucional (escola, hospital)
  "REFORMA_RESIDENCIAL",   // Reforma Residencial
  "REFORMA_COMERCIAL"      // Reforma Comercial
]);

/**
 * Padr√µes construtivos com diferentes n√≠veis de acabamento
 */
export const PadraoObraEnum = z.enum([
  "POPULAR",    // Padr√£o Popular (baixo custo)
  "NORMAL",     // Padr√£o Normal (m√©dio)
  "ALTO",       // Padr√£o Alto (alto custo)
  "LUXO"        // Padr√£o Luxo (alt√≠ssimo custo)
]);

/**
 * Status do or√ßamento no fluxo do sistema
 */
export const StatusOrcamentoEnum = z.enum([
  "RASCUNHO",          // Em cria√ß√£o
  "CONCLUIDO",         // Finalizado
  "VINCULADO_OBRA",    // Ligado a obra real
  "CONVERTIDO"         // Convertido em obra
]);

/**
 * Estados brasileiros (siglas)
 */
export const EstadoEnum = z.string()
  .length(2, "Estado deve ter exatamente 2 caracteres")
  .regex(/^[A-Z]{2}$/, "Estado deve estar em formato de sigla (ex: SP, RJ)");

/**
 * Unidades de medida padr√£o da constru√ß√£o civil
 */
export const UnidadeMedidaEnum = z.enum([
  "m¬≤",    // Metro quadrado
  "m¬≥",    // Metro c√∫bico
  "m",     // Metro linear
  "kg",    // Quilograma
  "t",     // Tonelada
  "und",   // Unidade
  "cj",    // Conjunto
  "p√ß",    // Pe√ßa
  "h",     // Hora
  "vg",    // Verba/Viga
  "l",     // Litro
  "sc",    // Saco
  "gl"     // Global
]);

// ====================================
// üéØ SCHEMAS BASE - Valida√ß√µes Fundamentais
// ====================================

/**
 * Schema base para valores monet√°rios
 */
export const ValorMonetarioSchema = z.number()
  .min(0, "Valor deve ser positivo")
  .refine((val) => Number.isFinite(val), "Valor deve ser um n√∫mero v√°lido")
  .refine((val) => val <= 999999999.99, "Valor muito alto")
  .transform((val) => Number(val.toFixed(2))); // Garantir 2 casas decimais

/**
 * Schema base para √°reas (m¬≤) - para formul√°rios
 */
export const AreaSchema = z.union([
  z.string().refine((val) => val === "" || !isNaN(parseFloat(val)), "√Årea deve ser um n√∫mero v√°lido"),
  z.number()
])
.transform((val) => {
  if (typeof val === "string") {
    if (val === "") return undefined;
    const num = parseFloat(val);
    return isNaN(num) ? undefined : num;
  }
  return val;
})
.refine((val) => val === undefined || (val >= 0.01 && val <= 999999), {
  message: "√Årea deve estar entre 0.01 e 999999 m¬≤"
});

/**
 * Schema base para √°reas (m¬≤) - para campos j√° processados
 */
export const AreaSchemaCompleto = z.number()
  .min(0.01, "√Årea deve ser maior que zero")
  .max(999999, "√Årea muito grande")
  .refine((val) => Number.isFinite(val), "√Årea deve ser um n√∫mero v√°lido");

/**
 * Schema base para percentuais
 */
export const PercentualSchema = z.number()
  .min(0, "Percentual deve ser positivo")
  .max(100, "Percentual n√£o pode exceder 100%");

/**
 * Schema para coordenadas geogr√°ficas (CEP brasileiro)
 */
export const CepSchema = z.string()
  .regex(/^\d{5}-?\d{3}$/, "CEP deve estar no formato 00000-000")
  .transform((cep) => cep.replace("-", ""));

// ====================================
// üèóÔ∏è SCHEMAS PRINCIPAIS - Or√ßamento Param√©trico
// ====================================

/**
 * Schema para dados de entrada do or√ßamento
 */
export const OrcamentoParametricoInputSchema = z.object({
  // Identifica√ß√£o b√°sica
  nome_orcamento: z.string()
    .min(3, "Nome deve ter pelo menos 3 caracteres")
    .max(100, "Nome muito longo")
    .trim(),
  
  descricao: z.string()
    .max(500, "Descri√ß√£o muito longa")
    .optional()
    .transform((val) => val?.trim()),

  // Classifica√ß√£o da obra
  tipo_obra: TipoObraEnum,
  padrao_obra: PadraoObraEnum,
  
  // Localiza√ß√£o
  estado: EstadoEnum,
  cidade: z.string()
    .min(2, "Nome da cidade muito curto")
    .max(100, "Nome da cidade muito longo")
    .trim(),
  cep: CepSchema.optional(),
  
  // √Åreas e metragens
  area_total: AreaSchema.refine((val) => val !== undefined && val >= 0.01, {
    message: "√Årea total √© obrigat√≥ria e deve ser maior que zero"
  }),
  area_construida: AreaSchema.optional(),
  area_detalhada: z.record(z.string(), z.number().positive()).optional(),
  
  // Especifica√ß√µes t√©cnicas  
  especificacoes: z.record(z.any()).optional(),
  parametros_entrada: z.record(z.any()).optional(),
  
  // Relacionamento opcional com obra existente
  obra_id: z.string().uuid().optional()
});

/**
 * Schema para or√ßamento param√©trico completo (com resultados da IA)
 */
export const OrcamentoParametricoSchema = OrcamentoParametricoInputSchema.extend({
  id: z.string().uuid(),
  usuario_id: z.string().uuid(),
  tenant_id: z.string().uuid(),
  
  // Resultados do c√°lculo
  custo_estimado: ValorMonetarioSchema,
  custo_m2: ValorMonetarioSchema,
  margem_erro_estimada: PercentualSchema.default(15.0),
  confianca_estimativa: z.number()
    .int()
    .min(0, "Confian√ßa deve ser positiva")
    .max(100, "Confian√ßa n√£o pode exceder 100%")
    .default(80),
  
  // Dados da IA
  parametros_ia: z.record(z.any()).optional(),
  sugestoes_ia: z.array(z.string()).default([]),
  alertas_ia: z.array(z.string()).default([]),
  
  // Status e controle
  status: StatusOrcamentoEnum.default("RASCUNHO"),
  data_calculo: z.date().default(() => new Date()),
  created_at: z.date().default(() => new Date()),
  updated_at: z.date().default(() => new Date())
});

/**
 * Schema para item de or√ßamento
 */
export const ItemOrcamentoSchema = z.object({
  id: z.string().uuid().optional(),
  orcamento_id: z.string().uuid(),
  
  // Categoriza√ß√£o (usando ENUMs existentes do sistema)
  categoria: z.enum([
    "MATERIAL_CONSTRUCAO",
    "MAO_DE_OBRA", 
    "ALUGUEL_EQUIPAMENTOS",
    "TRANSPORTE_FRETE",
    "TAXAS_LICENCAS",
    "SERVICOS_TERCEIRIZADOS",
    "ADMINISTRATIVO",
    "IMPREVISTOS",
    "OUTROS"
  ]),
  
  etapa: z.enum([
    "PLANEJAMENTO",
    "DEMOLICAO",
    "TERRAPLANAGEM",
    "FUNDACAO",
    "ESTRUTURA",
    "ALVENARIA",
    "COBERTURA",
    "INSTALACOES_ELETRICAS",
    "INSTALACOES_HIDRAULICAS",
    "REVESTIMENTOS_INTERNOS",
    "REVESTIMENTOS_EXTERNOS",
    "PINTURA",
    "ACABAMENTOS",
    "PAISAGISMO",
    "LIMPEZA_POS_OBRA",
    "ENTREGA_VISTORIA",
    "DOCUMENTACAO",
    "OUTROS"
  ]),
  
  insumo: z.string(), // Ser√° validado contra o ENUM do banco
  
  // Quantitativos e valores
  quantidade_estimada: z.number()
    .positive("Quantidade deve ser positiva")
    .max(999999, "Quantidade muito alta"),
  
  unidade_medida: UnidadeMedidaEnum,
  
  valor_unitario_base: ValorMonetarioSchema,
  
  // Dados auxiliares
  fonte_preco: z.enum(["CUB", "HISTORICO", "FORNECEDOR", "IA"]).optional(),
  indice_regional: z.number().positive().default(1.0),
  coeficiente_tecnico: z.number().positive().optional(),
  
  // Observa√ß√µes
  observacoes: z.string().max(500).optional(),
  alternativas_sugeridas: z.array(z.string()).default([]),
  
  // Auditoria
  created_at: z.date().default(() => new Date()),
  updated_at: z.date().default(() => new Date())
});

/**
 * Schema para base de custos regionais
 */
export const BaseCustoRegionalSchema = z.object({
  id: z.string().uuid().optional(),
  
  // Localiza√ß√£o
  estado: EstadoEnum,
  cidade: z.string().min(2).max(100).trim(),
  regiao: z.string().max(50).optional(),
  
  // Tipo e padr√£o
  tipo_obra: TipoObraEnum,
  padrao_obra: PadraoObraEnum,
  
  // Custos
  custo_m2_base: ValorMonetarioSchema,
  indice_regional: z.number().positive().default(1.0),
  
  // Fonte dos dados
  fonte_dados: z.enum(["SINDUSCON", "IBGE", "MERCADO", "HISTORICO"]),
  referencia_cub: z.string().max(20).optional(),
  
  // Controle temporal
  data_referencia: z.date(),
  data_atualizacao: z.date().default(() => new Date()),
  ativo: z.boolean().default(true),
  
  // Auditoria
  created_at: z.date().default(() => new Date()),
  updated_at: z.date().default(() => new Date())
});

/**
 * Schema para coeficientes t√©cnicos
 */
export const CoeficienteTecnicoSchema = z.object({
  id: z.string().uuid().optional(),
  
  // Tipo e padr√£o da obra
  tipo_obra: TipoObraEnum,
  padrao_obra: PadraoObraEnum,
  
  // Categoriza√ß√£o
  categoria: z.string(), // Ser√° validado contra ENUM existente
  etapa: z.string(),     // Ser√° validado contra ENUM existente  
  insumo: z.string(),    // Ser√° validado contra ENUM existente
  
  // Coeficiente t√©cnico
  quantidade_por_m2: z.number()
    .positive("Quantidade por m¬≤ deve ser positiva")
    .max(9999, "Coeficiente muito alto"),
  
  unidade_medida: UnidadeMedidaEnum,
  
  // Fonte t√©cnica
  fonte_tecnica: z.enum(["TCPO", "SINAPI", "EMPRESA", "NORMA"]),
  norma_referencia: z.string().max(50).optional(),
  
  // Varia√ß√µes
  variacao_minima: z.number().positive().optional(),
  variacao_maxima: z.number().positive().optional(),
  observacoes_tecnicas: z.string().max(500).optional(),
  
  // Controle
  ativo: z.boolean().default(true),
  created_at: z.date().default(() => new Date()),
  updated_at: z.date().default(() => new Date())
});

/**
 * Schema para compara√ß√£o or√ßamento vs real
 */
export const ComparacaoOrcamentoRealSchema = z.object({
  id: z.string().uuid().optional(),
  
  // Relacionamentos
  orcamento_id: z.string().uuid(),
  obra_id: z.string().uuid(),
  tenant_id: z.string().uuid(),
  
  // Compara√ß√£o de valores
  valor_orcado: ValorMonetarioSchema,
  valor_real: ValorMonetarioSchema,
  
  // An√°lises
  desvios_por_categoria: z.record(z.number()).optional(),
  desvios_por_etapa: z.record(z.number()).optional(),
  
  // Insights
  principais_desvios: z.array(z.string()).default([]),
  causas_identificadas: z.array(z.string()).default([]),
  licoes_aprendidas: z.array(z.string()).default([]),
  
  // M√©tricas
  score_precisao: z.number().int().min(0).max(100).optional(),
  fatores_sucesso: z.array(z.string()).default([]),
  fatores_erro: z.array(z.string()).default([]),
  
  // Controle temporal
  data_inicio_obra: z.date().optional(),
  data_fim_obra: z.date().optional(),
  data_analise: z.date().default(() => new Date()),
  
  // Auditoria
  created_at: z.date().default(() => new Date()),
  updated_at: z.date().default(() => new Date())
});

// ====================================
// üé® SCHEMAS PARA WIZARD/FORMUL√ÅRIOS
// ====================================

/**
 * Schema para Etapa 1: Dados b√°sicos da obra
 */
export const WizardEtapa1Schema = z.object({
  nome_orcamento: z.string()
    .min(3, "Nome deve ter pelo menos 3 caracteres")
    .max(100, "Nome muito longo"),
  
  tipo_obra: TipoObraEnum,
  padrao_obra: PadraoObraEnum,
  
  descricao: z.string().max(500).optional()
});

/**
 * Schema para Etapa 2: Localiza√ß√£o
 */
export const WizardEtapa2Schema = z.object({
  estado: EstadoEnum,
  cidade: z.string().min(2).max(100).trim(),
  cep: CepSchema.optional()
});

/**
 * Schema para Etapa 3: √Åreas e metragens
 */
export const WizardEtapa3Schema = z.object({
  area_total: AreaSchema.refine((val) => val !== undefined && val >= 0.01, {
    message: "√Årea total √© obrigat√≥ria e deve ser maior que zero"
  }),
  area_construida: AreaSchema.optional(),
  area_detalhada: z.record(z.string(), z.number().positive()).optional()
});

/**
 * Schema para Etapa 4: Especifica√ß√µes t√©cnicas
 */
export const WizardEtapa4Schema = z.object({
  especificacoes: z.record(z.any()).optional(),
  parametros_entrada: z.record(z.any()).optional()
});

/**
 * Schema completo do wizard (uni√£o de todas as etapas)
 */
export const WizardCompletoSchema = WizardEtapa1Schema
  .merge(WizardEtapa2Schema)
  .merge(WizardEtapa3Schema)
  .merge(WizardEtapa4Schema)
  .extend({
    obra_id: z.string().uuid().optional()
  });

// ====================================
// üîß SCHEMAS PARA REQUESTS/RESPONSES
// ====================================

/**
 * Schema para request de cria√ß√£o de or√ßamento
 */
export const CriarOrcamentoRequestSchema = WizardCompletoSchema;

/**
 * Schema para request de atualiza√ß√£o de or√ßamento
 */
export const AtualizarOrcamentoRequestSchema = WizardCompletoSchema.partial();

/**
 * Schema para request de c√°lculo de or√ßamento
 */
export const CalcularOrcamentoRequestSchema = z.object({
  orcamento_id: z.string().uuid(),
  forcar_recalculo: z.boolean().default(false)
});

/**
 * Schema para response de c√°lculo de or√ßamento
 */
export const CalcularOrcamentoResponseSchema = z.object({
  success: z.boolean(),
  orcamento: OrcamentoParametricoSchema,
  itens: z.array(ItemOrcamentoSchema),
  tempo_calculo_ms: z.number().int().positive(),
  tokens_usados: z.number().int().positive().optional()
});

/**
 * Schema para filtros de busca de or√ßamentos
 */
export const FiltrosOrcamentoSchema = z.object({
  tipo_obra: TipoObraEnum.optional(),
  padrao_obra: PadraoObraEnum.optional(),
  status: StatusOrcamentoEnum.optional(),
  estado: EstadoEnum.optional(),
  cidade: z.string().optional(),
  custo_min: ValorMonetarioSchema.optional(),
  custo_max: ValorMonetarioSchema.optional(),
  data_inicio: z.date().optional(),
  data_fim: z.date().optional(),
  limit: z.number().int().positive().max(100).default(20),
  offset: z.number().int().min(0).default(0)
});

// ====================================
// üì§ EXPORTS - Tipos TypeScript
// ====================================

export type TipoObra = z.infer<typeof TipoObraEnum>;
export type PadraoObra = z.infer<typeof PadraoObraEnum>;
export type StatusOrcamento = z.infer<typeof StatusOrcamentoEnum>;
export type UnidadeMedida = z.infer<typeof UnidadeMedidaEnum>;

export type OrcamentoParametricoInput = z.infer<typeof OrcamentoParametricoInputSchema>;
export type OrcamentoParametrico = z.infer<typeof OrcamentoParametricoSchema>;
export type ItemOrcamento = z.infer<typeof ItemOrcamentoSchema>;
export type BaseCustoRegional = z.infer<typeof BaseCustoRegionalSchema>;
export type CoeficienteTecnico = z.infer<typeof CoeficienteTecnicoSchema>;
export type ComparacaoOrcamentoReal = z.infer<typeof ComparacaoOrcamentoRealSchema>;

export type WizardEtapa1 = z.infer<typeof WizardEtapa1Schema>;
export type WizardEtapa2 = z.infer<typeof WizardEtapa2Schema>;
export type WizardEtapa3 = z.infer<typeof WizardEtapa3Schema>;
export type WizardEtapa4 = z.infer<typeof WizardEtapa4Schema>;
export type WizardCompleto = z.infer<typeof WizardCompletoSchema>;

export type CriarOrcamentoRequest = z.infer<typeof CriarOrcamentoRequestSchema>;
export type AtualizarOrcamentoRequest = z.infer<typeof AtualizarOrcamentoRequestSchema>;
export type CalcularOrcamentoRequest = z.infer<typeof CalcularOrcamentoRequestSchema>;
export type CalcularOrcamentoResponse = z.infer<typeof CalcularOrcamentoResponseSchema>;
export type FiltrosOrcamento = z.infer<typeof FiltrosOrcamentoSchema>;

// ====================================
// üéØ CONSTANTES √öTEIS
// ====================================

/**
 * Labels amig√°veis para tipos de obra
 */
export const TIPO_OBRA_LABELS: Record<TipoObra, string> = {
  R1_UNIFAMILIAR: "Resid√™ncia Unifamiliar",
  R4_MULTIFAMILIAR: "Resid√™ncia Multifamiliar", 
  COMERCIAL_LOJA: "Com√©rcio - Loja",
  COMERCIAL_ESCRITORIO: "Com√©rcio - Escrit√≥rio",
  COMERCIAL_GALPAO: "Com√©rcio - Galp√£o",
  INDUSTRIAL_LEVE: "Industrial Leve",
  INDUSTRIAL_PESADA: "Industrial Pesada",
  INSTITUCIONAL: "Institucional",
  REFORMA_RESIDENCIAL: "Reforma Residencial",
  REFORMA_COMERCIAL: "Reforma Comercial"
};

/**
 * Labels amig√°veis para padr√µes de obra
 */
export const PADRAO_OBRA_LABELS: Record<PadraoObra, string> = {
  POPULAR: "Padr√£o Popular",
  NORMAL: "Padr√£o Normal",
  ALTO: "Padr√£o Alto",
  LUXO: "Padr√£o Luxo"
};

/**
 * Labels amig√°veis para status
 */
export const STATUS_ORCAMENTO_LABELS: Record<StatusOrcamento, string> = {
  RASCUNHO: "Rascunho",
  CONCLUIDO: "Conclu√≠do",
  VINCULADO_OBRA: "Vinculado √† Obra",
  CONVERTIDO: "Convertido em Obra"
};

/**
 * Cores para status (Tailwind classes)
 */
export const STATUS_ORCAMENTO_CORES: Record<StatusOrcamento, string> = {
  RASCUNHO: "bg-gray-100 text-gray-800",
  CONCLUIDO: "bg-blue-100 text-blue-800",
  VINCULADO_OBRA: "bg-green-100 text-green-800",
  CONVERTIDO: "bg-purple-100 text-purple-800"
};

/**
 * Estados brasileiros completos
 */
export const ESTADOS_BRASILEIROS = [
  { sigla: "AC", nome: "Acre" },
  { sigla: "AL", nome: "Alagoas" },
  { sigla: "AP", nome: "Amap√°" },
  { sigla: "AM", nome: "Amazonas" },
  { sigla: "BA", nome: "Bahia" },
  { sigla: "CE", nome: "Cear√°" },
  { sigla: "DF", nome: "Distrito Federal" },
  { sigla: "ES", nome: "Esp√≠rito Santo" },
  { sigla: "GO", nome: "Goi√°s" },
  { sigla: "MA", nome: "Maranh√£o" },
  { sigla: "MT", nome: "Mato Grosso" },
  { sigla: "MS", nome: "Mato Grosso do Sul" },
  { sigla: "MG", nome: "Minas Gerais" },
  { sigla: "PA", nome: "Par√°" },
  { sigla: "PB", nome: "Para√≠ba" },
  { sigla: "PR", nome: "Paran√°" },
  { sigla: "PE", nome: "Pernambuco" },
  { sigla: "PI", nome: "Piau√≠" },
  { sigla: "RJ", nome: "Rio de Janeiro" },
  { sigla: "RN", nome: "Rio Grande do Norte" },
  { sigla: "RS", nome: "Rio Grande do Sul" },
  { sigla: "RO", nome: "Rond√¥nia" },
  { sigla: "RR", nome: "Roraima" },
  { sigla: "SC", nome: "Santa Catarina" },
  { sigla: "SP", nome: "S√£o Paulo" },
  { sigla: "SE", nome: "Sergipe" },
  { sigla: "TO", nome: "Tocantins" }
]; 